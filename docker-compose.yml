services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: construction_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - construction_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Spring Boot Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: construction_backend
    ports:
      - "8080:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - construction_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Python Flask Backend
  flask-backend:
    build:
      context: ./pys
      dockerfile: Dockerfile
    container_name: construction_flask_backend
    ports:
      - "5001:5001"
    environment:
      - FLASK_ENV=production
      - FLASK_APP=seismic_api.py
    volumes:
      - ./pys/GeoVan_src4326.tif:/app/GeoVan_src4326.tif:ro
    networks:
      - construction_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Next.js Frontend
  frontend:
    build:
      context: ./next
      dockerfile: Dockerfile.dev
    container_name: construction_frontend
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: development
      WATCHPACK_POLLING: "true"
    volumes:
      - ./next:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      backend:
        condition: service_healthy
      flask-backend:
        condition: service_healthy
    networks:
      - construction_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

volumes:
  postgres_data:
    driver: local

networks:
  construction_network:
    driver: bridge 